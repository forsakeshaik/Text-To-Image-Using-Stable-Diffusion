# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R7rss1A_M3d1IYJbqr1jBUGbzVo2TQS9
"""



# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126wRprlZptEuElceHTeoXl-AY_O2Xmwf
"""

### Import necessary libraries
import diffusers
import streamlit as st
import torch
from diffusers import StableDiffusionPipeline
from PIL import Image

### Create a Streamlit app title
st.title("Text-to-Image Generation")

### Create a text input for the user prompt
prompt = st.text_input("Enter your prompt:", value="An idyllic sunset over a serene lake, with vibrant colors reflecting on the water and silhouettes of trees against the twilight sky.")

### Create a button to generate the image
if st.button("Generate Image"):
    ### Load the Stable Diffusion model
    pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16)
    pipe = pipe.to("cuda")

    ### Set the generator and generate the image
    generator = torch.Generator("cuda").manual_seed(1024)
    image = pipe(prompt, num_inference_steps=100, generator=generator).images[0]

    ### Display the generated image
    st.image(image, caption="Generated Image")

### Create a section for generating multiple images
st.header("Generate Multiple Images")
num_images = st.slider("Number of images:", min_value=1, max_value=12, value=3)
prompt_multiple = st.text_input("Enter your prompt for multiple images:", value="a photograph of an astronaut riding a horse")

### Create a button to generate multiple images
if st.button("Generate Multiple Images"):
    ### Load the Stable Diffusion model
    pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16)
    pipe = pipe.to("cuda")

    ### Generate multiple images
    images = []
    for _ in range(num_images):
        generator = torch.Generator("cuda").manual_seed(1024)
        images.extend(pipe([prompt_multiple] * num_images).images)

    ### Create an image grid
    def image_grid(imgs, rows, cols):
        assert len(imgs) == rows*cols
        w, h = imgs[0].size
        grid = Image.new('RGB', size=(cols*w, rows*h))
        grid_w, grid_h = grid.size
        for i, img in enumerate(imgs):
            grid.paste(img, box=(i%cols*w, i//cols*h))
        return grid

    grid = image_grid(images, rows=(num_images+2)//3, cols=3)
    st.image(grid, caption="Generated Image Grid")